print( "[Terrain] cl_terrain.lua")

--Loads terrain files generated by Nem's Mega 3D Terrain Generator
----http://nemesis.thewavelength.net/index.php?p=8
----Fix upside-down terrain in Tools->Options->Exportation->Export Surface->Bottom.

local POSITION_OFFSET = Vector( 0, 0, -11000 )
local GLOBAL_TRIANGLES = {}
local RENDER_GRID = Material("editor/wireframe")
local RENDER_MAT = CreateMaterial( "White", "UnlitGeneric", {
	[ "$basetexture" ] = "color/white",
	[ "$vertexcolor" ] = "1",
	[ "$vertexalpha" ] = "1",
	[ "$nocull" ] = "1",
} )


local function stringToVector( str )
  str = string.Explode( " ", str )
  return Vector( str[2], str[3], str[4] ) + POSITION_OFFSET
end

local function stringScale( str )
  str = string.Explode( "\t", str )
  return tonumber( str[3] )
end

concommand.Add( "hlterrain_debug", function( ply, cmd, args )
  local strFile = file.Read( "hlterrain/map.txt", "DATA" )

  local splitStr = string.Explode( "\nEnd Polygon", strFile )

  for _, block in pairs( splitStr ) do
    local valueSplit = string.Explode( "\n", block )
    if ( string.Left( valueSplit[2], 5 ) == "Begin" ) then
      local uStr = stringScale( valueSplit[6] )
      local vStr = stringScale( valueSplit[7] )

      local vecStr1 = stringToVector( valueSplit[9] )
      local vecStr2 = stringToVector( valueSplit[10] )
      local vecStr3 = stringToVector( valueSplit[11] )

      table.insert( GLOBAL_TRIANGLES, {
        { pos = vecStr1, u=uStr, v=vStr },
        { pos = vecStr2, u=uStr, v=vStr },
        { pos = vecStr3, u=uStr, v=vStr },
      })
    end
  end
end )

hook.Add( "PostDrawOpaqueRenderables", "terrain-render", function()
  --Flat surface
  for triangle=1, #GLOBAL_TRIANGLES do

    render.SetMaterial( RENDER_MAT )

    mesh.Begin( 2, 1)
      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 1 ].pos )
      mesh.Color(0, 0, 0, 255)
      mesh.AdvanceVertex()

      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 2 ].pos )
      mesh.Color(0, 0, 0, 255)
      mesh.AdvanceVertex()

      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 3 ].pos )
      mesh.Color(0, 0, 0, 255)
      mesh.AdvanceVertex()
    mesh.End()

    render.SetMaterial( RENDER_GRID )

    mesh.Begin( 2, 1)
      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 1 ].pos+Vector(0,0,3) )
      mesh.Color(255, 0, 0, 255)
      mesh.AdvanceVertex()

      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 2 ].pos+Vector(0,0,3) )
      mesh.Color(0, 255, 0, 255)
      mesh.AdvanceVertex()

      mesh.Position( GLOBAL_TRIANGLES[ triangle ][ 3 ].pos+Vector(0,0,3) )
      mesh.Color(0, 0, 255, 255)
      mesh.AdvanceVertex()
    mesh.End()
  end

end )
